name: ci

on:
  pull_request:
  push:

permissions:
  contents: read

jobs:

  tests:
    timeout-minutes: 30

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false

      matrix:
        rust: [ 1.81, stable, beta ]

    steps:
      - uses: actions/checkout@v4

      - run: uname -rm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: clippy

      - name: Clippy
        run: cargo clippy --workspace

      - name: Tests with all features
        run: cargo test --workspace --all-features

      - name: Tests with no features
        run: cargo test --workspace --no-default-features

  rustfmt:
    timeout-minutes: 10

    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all --check

  images:
    timeout-minutes: 30

    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4

      - run: uname -rm

      - name: Install packages
        run: |
            set -ex
            sudo apt-get update -q
            sudo apt-get install -y mtree-netbsd

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: stable
          components: clippy

      - name: Build the unpack example.
        run: |
          set -xe

          cargo install --example unpack --path . --root target

          sudo install -s -t /usr/local/bin/ target/bin/unpack

      - name: Custom images.
        run: |
          set -xe

          prefix() {
              awk -v c="$1" -v p="$2" \
                '{ print "\x1b[" c "m" p " | \x1b[m" $0; fflush() }'
          }

          sudo ci/custom-images 2> >(prefix 34 BUILD 1>&2) \
            | sudo ci/run-tests &> >(prefix 35 TESTS)

      - name: Images from registries.
        run: sudo ci/run-tests < ci/references
